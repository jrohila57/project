// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  passwordHash   String
  name           String
  bio            String?
  isEmailVerified Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLoginAt    DateTime?
  accountStatus  String    @default("ACTIVE")
  
  // User settings
  theme                String    @default("light")
  defaultSort          String    @default("priority")
  showCompletedTodos   Boolean   @default(true)
  notificationsEnabled Boolean   @default(true)
  
  // Relations
  projects     Project[]
  todos        Todo[]
  sessions     Session[]
}

// Session model
model Session {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  ipAddress  String?
  userAgent  String?
  isRevoked  Boolean  @default(false)
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

// Project model
model Project {
  id             String    @id @default(uuid())
  name           String
  description    String?
  color          String?
  isArchived     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  todos          Todo[]
}

// Todo model
model Todo {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPinned    Boolean   @default(false)
  isArchived  Boolean   @default(false)
  tags        String[]
  reminderAt  DateTime?
  repeat      String?
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
}
